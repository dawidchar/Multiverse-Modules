import app from '../server'
import request from "supertest"
import fileUtils from '../utils/fileUtils'
let { getFile, saveFile } = fileUtils

describe('Server.js', () => {
  beforeAll(() => {
    getFile = jest.fn(() => { exampleData })
    saveFile = jest.fn(() => { })
  });
  describe('GET /airports', () => {
    it('returns a 200 status code', (done) => {
      request(app)
        .get('/airports')
        .expect(200)
        .end(done)
    });
    it('returns a JSON response', (done) => {
      request(app)
        .get('/airports')
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end(done)
    });
    it('array contains multiple entries', (done) => {
      request(app)
        .get('/airports')
        .set('Accept', 'application/json')
        .expect(resp => expect(resp.body.length).toBeGreaterThan(2))
        .end(done)
    });
  });
  describe('GET /airport/:icao', () => {
    it('returns a 200 staus code', (done) => {
      request(app)
        .get('/airport/KJFK')
        .expect(200)
        .end(done)
    });
    it('returns a JSON response', (done) => {
      request(app)
        .get('/airport/KJFK')
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .end(done)
    });
    it('returns the correct airport', (done) => {
      request(app)
        .get('/airport/KJFK')
        .set('Accept', 'application/json')
        .expect(resp => expect(resp.body.name).toBe('John F Kennedy International Airport'))
        .end(done)
    });
  });
  describe('POST /airports', () => {
    beforeEach(() => {
      saveFile = jest.fn(() => { })
    });
    it('returns a 200 staus code', (done) => {
      request(app)
        .post('/airports')
        .send(examplePost)
        .expect(200)
        .end(done)
    });
    it('Adds the airport to the airports data', () => {
      request(app).post('/airports').send(examplePost).end(() => {
        expect(exampleData.findIndex(airport => airport.icao == 'EGLL')).toBeGreaterThan(-1)
      })
    });
    it('calls saveFile Function', () => {
      request(app).post('/airports').send(examplePost).end(() => {
        expect(saveFile).toHaveBeenCalled();
        expect(saveFile).toHaveBeenCalledTimes(1);
      })
    });
  });
  describe('PUT /airport/:icao', (done) => {
    beforeEach(() => {
      saveFile = jest.fn(() => { })
    });
    it('returns a 200 status code', () => {
      request(app)
        .patch('/airport/EGBB')
        .send({})
        .expect(200)
        .end(done)
    });
    it('replaces the data', () => {
      request(app).post('/airport/EGBB').send(examplePost).end(() => {
        expect(exampleData.find(airport => airport.icao == 'EGBB').name).toBe('London Heathrow Airport')
      })
    });
  });
  describe('PATCH /airport/:icao', (done) => {
    beforeEach(() => {
      saveFile = jest.fn(() => { })
    });
    it('returns a 200 status code', () => {
      request(app)
        .patch('/airport/EGGD')
        .send({})
        .expect(200)
        .end(done)
    });
    it('Edits the correct piece of data', () => {
      request(app).patch('/airport/EGGD').send(examplePut).end(() => {
        expect(exampleData.find(airport => airport.icao == 'EGGD').elevation).toBe(650)
      })
    });
    it('Does not the modify other data', () => {
      request(app).patch('/airport/EGGD').send(examplePut).end(() => {
        expect(exampleData.find(airport => airport.icao == 'EGGD').city).toBe("Bristol")
      })
    });
  });
  describe('DELETE /airport/:icao', () => {
    beforeEach(() => {
      saveFile = jest.fn(() => { })
    });
    it('returns a 200 status code', (done) => {
      request(app)
        .delete('/airport/ZSPD')
        .expect(200)
        .end(done)
    });
    it('deletes the airport', () => {
      request(app).post('/airport/ZBAA').send(examplePost).end(() => {
        expect(exampleData.findIndex(airport => airport.icao == 'ZBAA')).toBe(-1)
      })
    });
  });
});

const examplePost = {
  "icao": "EGLL",
  "iata": "LHR",
  "name": "London Heathrow Airport",
  "city": "London",
  "state": "England",
  "country": "GB",
  "elevation": 83,
  "lat": 51.4706001282,
  "lon": -0.4619410038,
  "tz": "Europe/London"
}

const examplePut = {
  "elevation": 650
}


const exampleData = [
  {
    "icao": "KJFK",
    "iata": "JFK",
    "name": "John F Kennedy International Airport",
    "city": "New York",
    "state": "New-York",
    "country": "US",
    "elevation": 13,
    "lat": 40.63980103,
    "lon": -73.77890015,
    "tz": "America/New_York"
  },
  {
    "icao": "EGGD",
    "iata": "BRS",
    "name": "Bristol International Airport",
    "city": "Bristol",
    "state": "England",
    "country": "GB",
    "elevation": 622,
    "lat": 51.3827018738,
    "lon": -2.7190899849,
    "tz": "Europe/London"
  },
  {
    "icao": "EGBJ",
    "iata": "GLO",
    "name": "Gloucestershire Airport",
    "city": "Staverton",
    "state": "England",
    "country": "GB",
    "elevation": 101,
    "lat": 51.8941993713,
    "lon": -2.1672201157,
    "tz": "Europe/London"
  },
  {
    "icao": "EGBB",
    "iata": "BHX",
    "name": "Birmingham International Airport",
    "city": "Birmingham",
    "state": "England",
    "country": "GB",
    "elevation": 327,
    "lat": 52.4538993835,
    "lon": -1.7480299473,
    "tz": "Europe/London"
  },
  {
    "icao": "ZBAA",
    "iata": "PEK",
    "name": "Beijing Capital International Airport",
    "city": "Beijing",
    "state": "Beijing",
    "country": "CN",
    "elevation": 116,
    "lat": 40.0801010132,
    "lon": 116.5849990845,
    "tz": "Asia/Shanghai"
  },
  {
    "icao": "ZSPD",
    "iata": "PVG",
    "name": "Shanghai Pudong International Airport",
    "city": "Shanghai",
    "state": "Shanghai",
    "country": "CN",
    "elevation": 13,
    "lat": 31.1434001923,
    "lon": 121.8050003052,
    "tz": "Asia/Shanghai"
  }
]
